import
load("~/My Box Files/Prestige/Retail Metrics/RM2/Retail_Metrics_App_appdata.xlsx")
load("~/My Box Files/Prestige/Retail Metrics/RM2/Retail_Metrics_App_appdata.xlsx")
load("~/My Box Files/Prestige/Retail Metrics/RM2/Retail_Metrics_App_extract.xlsx")
install.packages("sqldf")
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/chord diagram.R')
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/chord diagram.R')
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/chord diagram.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/chord diagram.R', echo=TRUE)
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/chord diagram.R', echo=TRUE)
install.packages("jsonlite")
library(jsonlite)
jsonData <- fromJSON("http://openexchangerates.org/api/latest.json?app_id=b399b7cb3faf4d3f951358d32b0d34f2")
install.packages("curl")
jsonData <- fromJSON("http://openexchangerates.org/api/latest.json?app_id=b399b7cb3faf4d3f951358d32b0d34f2")
jsonData <- fromJSON("http://openexchangerates.org/api/latest.json?app_id=b399b7cb3faf4d3f951358d32b0d34f2")
?fromJSON
GET("http://openexchangerates.org/api/latest.json?app_id=b399b7cb3faf4d3f951358d32b0d34f2")
?GET
jsonData <- fromJSON("http://openexchangerates.org/api/latest.json?app_id=b399b7cb3faf4d3f951358d32b0d34f2")
article_key <- "&api-key=c2fede7bd9aea57c898f538e5ec0a1ee:6:68700045"
url <- "http://api.nytimes.com/svc/search/v2/articlesearch.json?q=obamacare+socialism"
req <- fromJSON(paste0(url, article_key))
articles <- req$response$docs
colnames(articles)
?open.connection
?curl
jsonData <- fromJSON("http://openexchangerates.org/api/latest.json?app_id=b399b7cb3faf4d3f951358d32b0d34f2")
head(fromJSON)
?fromJSON
download.file("http://pdf.keysnews.com/frontpage.pdf",destfile="./test.pdf", method="curl")
download.file("http://pdf.keysnews.com/frontpage.pdf",destfile="./test.pdf")
jsonData <- fromJSON("http://openexchangerates.org/api/latest.json?app_id=b399b7cb3faf4d3f951358d32b0d34f2",method="curl")
?ping
??ping
download.file("http://openexchangerates.org/api/latest.json?app_id=b399b7cb3faf4d3f951358d32b0d34f2",destfile="./test.json")
dir()
testJSON <- fromJSON("test.json")
View(testJSON)
?download.file
jsonData <- fromJSON("http://openexchangerates.org/api/latest.json?app_id=b399b7cb3faf4d3f951358d32b0d34f2",method="wget")
read.table("http://openexchangerates.org/api/latest.json?app_id=b399b7cb3faf4d3f951358d32b0d34f2")
readLines(""http://openexchangerates.org/api/latest.json?app_id=b399b7cb3faf4d3f951358d32b0d34f2"")
readLines("http://openexchangerates.org/api/latest.json?app_id=b399b7cb3faf4d3f951358d32b0d34f2")
testJSON <- readLines("http://openexchangerates.org/api/latest.json?app_id=b399b7cb3faf4d3f951358d32b0d34f2")
View(testJSON)
readJSON(testJSON)
?scan
scan(file="http://openexchangerates.org/api/latest.json?app_id=b399b7cb3faf4d3f951358d32b0d34f2")
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/chord diagram.R', echo=TRUE)
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/chord diagram.R', echo=TRUE)
install.packages("circlize")
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/chord diagram.R', echo=TRUE)
insta..packages("circlize")
install.packages("circlize")
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/chord diagram.R', echo=TRUE)
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/chord diagram.R', echo=TRUE)
ping()
?ping
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/chord diagram.R', echo=TRUE)
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/Countriesdistance.R', echo=TRUE)
lesDist <- rbind_all(mget(lesDist))
lesDist <- lapply(indicePays[-length(indicePays)], lesDistancesUnPays)
lesDist <- rbind_all(lesDist)
View(lesDist)
head(lesDist)
lesDist <- rbind_list(lesDist)
# http://editerna.free.fr/wp/?p=199
# load(url("http://editerna.free.fr/R/Blog/Cartes/countries_distances.RData"))
library(maps)
library(geosphere)
library(dplyr)
world.map <- map("world", fill = TRUE)
indicePays <- seq(1,length(world.map$names))[-grep(":", world.map$names)]
# https://stat.ethz.ch/pipermail/r-help/2010-April/237031.html
splitNA <- function(x){
idx <- 1 + cumsum(is.na(x))
not.na <- !is.na(x)
split(x[not.na], idx[not.na])
}
# Coordinates of every country
lesCoordsX <- splitNA(world.map$x)
lesCoordsY <- splitNA(world.map$y)
lesDistancesUnPays <- function(unIndicePays){
# Borders coordinates for current country
coordsPays <- data.frame(long = lesCoordsX[[unIndicePays]], lat = lesCoordsY[[unIndicePays]])
# Indexes of countries except the current one
# and the one for which the computation has already been done
lesIndicesAutresPays <- indicePays[indicePays > unIndicePays]
distancePoint <- function(unPoint){
unPoint.m <- matrix(unPoint, ncol = 2)
# We need to compute distances between unPoint and every border points of every other countries
# it is given by lesIndicesAutresPays
distancePointPays <- function(unIndicePays2){
coordsPays2 <- matrix(cbind(long = lesCoordsX[[unIndicePays2]], lat = lesCoordsY[[unIndicePays2]]), ncol = 2)
lesDistPointPays2 <- spDists(x=coordsPays2, y=matrix(unPoint, ncol=2), longlat=TRUE)
return(min(lesDistPointPays2)) # shortest distance between unPoint and country which index is unIndicePays2
}
lesDistPointPays2 <- lapply(lesIndicesAutresPays, distancePointPays)
res <- unlist(lesDistPointPays2)
return(res)
}
distancesPays <- apply(coordsPays, 1, distancePoint)
# Shortest distances between unPoint and every other country
if(!is.matrix(distancesPays)){
# For the last country on the list
plusCourtesDistances <- min(distancesPays)
}else{
plusCourtesDistances <- apply(distancesPays, 1, min)
}
resul <- cbind(pays1 = rep(unIndicePays, length(plusCourtesDistances)),pays2 = lesIndicesAutresPays, dist = plusCourtesDistances)
return(resul)
}
# We don't need distances for the last country (they have all been computed)
lesDist <- lapply(indicePays[-length(indicePays)], lesDistancesUnPays)
lesDist <- rbind_list(lesDist)
# We need to recover distances for each couple
lesDist$ID <- paste(sprintf("%04d", lesDist$pays1), sprintf("%04d", lesDist$pays2), sep = "")
lesDist2 <- data.frame(cbind(pays1 = rep(indicePays, each = length(indicePays)),
pays2 = rep(indicePays, length(indicePays))))
lesDist2  <-  lesDist2[-which(lesDist2$pays1 == lesDist2$pays2),]
lesDist2$ID <- paste(sprintf("%04d", lesDist2$pays1), sprintf("%04d", lesDist2$pays2), sep = "")
lesDist2$ID2 <- paste(sprintf("%04d", lesDist2$pays2), sprintf("%04d", lesDist2$pays1), sep = "")
lesDist2$match <- match(lesDist2$ID, lesDist$ID)
lesDist2[is.na(lesDist2$match),"match"] <- match(lesDist2$ID2[is.na(lesDist2$match)], lesDist$ID)
lesDist2$dist <- lesDist[lesDist2$match, "dist"]
lesDist2 <- lesDist2[,c("pays1", "pays2", "dist")]
lesDist <- lesDist2
rm(lesDist2)
# Let's add countries names
lesDist$pays1 <- world.map$names[lesDist$pays1]
lesDist$pays2 <- world.map$names[lesDist$pays2]
source('~/.active-rstudio-document', echo=TRUE)
lesDist <- lapply(indicePays[-length(indicePays)], lesDistancesUnPays)
install.packages("rJava")
install.packages("randomForest")
install.packages("randomForest")
install.packages("quantmod")
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/Countriesdistance.R', echo=TRUE)
lesDist[lesDist$dist == 0,]
distances <- lesDist
bordercountries <- lesDist[lesDist$dist == 0,]
View(bordercountries)
View(bordercountries)
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/Countriesdistance.R', echo=TRUE)
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/chord diagram.R', echo=TRUE)
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/chord diagram.R', echo=TRUE)
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/chord diagram.R', echo=TRUE)
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/chord diagram.R', echo=TRUE)
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/Countriesdistance.R', echo=TRUE)
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/chord diagram.R', echo=TRUE)
View(lesDist)
View(bordercountries)
load(url("http://editerna.free.fr/R/Blog/Cartes/countries_distances.RData"))
View(lesDist)
?
load
?url
install.packages("countrycode")
?countrycode
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/chord diagram.R', echo=TRUE)
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/chord diagram.R', echo=TRUE)
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/chord diagram.R', echo=TRUE)
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/chord diagram.R', echo=TRUE)
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/chord diagram.R', echo=TRUE)
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/Countriesdistance.R', echo=TRUE)
install.packages("cshapes")
source('~/.active-rstudio-document', echo=TRUE)
?plotly
source('~/R/test/plotlyapi.R', echo=TRUE)
?py
py
?plotly
source('~/R/test/plotlyapi.R', echo=TRUE)
source('~/R/test/plotlyapi.R', echo=TRUE)
source('~/R/test/plotlyapi.R', echo=TRUE)
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/chord diagram.R', echo=TRUE)
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/chord diagram.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("KernSmooth")
library(KernSmooth)
?factor
library(lattice)
?xyplot
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
print(p)
?print.trellis
?splom
?trellis.par.set
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
library(ggplot2)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
?ggplot
qplot(votes, rating, data = movies)
head(movies)
str(movies)
qplot(votes, rating, data = movies) + geom_smooth()
install.packages(c("BH", "crayon", "curl"))
install.packages(c("devtools", "evaluate", "formatR", "gdata", "gtools", "highr"))
install.packages(c("devtools", "evaluate", "formatR", "gdata", "gtools", "highr", "jsonlite", "knitr", "manipulate", "maptools", "markdown", "plyr", "Rcpp", "RCurl", "rmarkdown", "roxygen2", "sp", "stringr"))
install.packages(c("BH", "codetools", "curl", "devtools", "evaluate", "formatR", "gdata", "gtools", "highr", "jsonlite", "knitr", "lattice", "manipulate", "markdown", "MASS", "Matrix", "mgcv", "plyr", "Rcpp", "RCurl", "rmarkdown", "roxygen2", "sp", "stringr"), lib="C:/Program Files/R/R-3.1.3/library")
setwd("~/My Box Files/DataSciTraining/Repos/CleaningData - Quiz3")
## Download data
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileURL,"2006.csv"",method="curl)
data <- read.csv("2006.csv")
download.file(fileURL,"2006.csv",method="curl")
source('~/My Box Files/DataSciTraining/Repos/CleaningData - Quiz3/quiz3q1.R')
source('~/My Box Files/DataSciTraining/Repos/CleaningData - Quiz3/quiz3q1.R')
head(data)
summarz(data)
summary(data)
names(data)
str(data)
source('~/My Box Files/DataSciTraining/Repos/CleaningData - Quiz3/quiz3q1.R')
agricultureLogical<-(data$ACR==3 & data$AGS==6)
which(agricultureLogical)
library(jpeg)
install.packages("jpeg")
library(jpeg)
?jped
?jpeg
?readJPEG
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
if(!file.exists("dude.jpg")) download.file(fileURL,"dude.jpg")
data <- readJPEG("dude.jpg", native=TRUE)
View(data)
?quantile
quantile(data,probs=seq(0.3, 0.8))
quantile(data,probs=c(0.3, 0.8))
library(jpeg)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", "jeff.jpg", mode="wb")
jpg <- readJPEG("jeff.jpg", native = TRUE)
quantile(jpg, probs = c(.3,.8))
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv","data.csv")
data<- read.csv("data.csv")
head(data)
data
names(data)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", destfile = "GDPData.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv", destfile= "Educationaldata.csv")
GDPData <- read.csv("GDPData.csv", stringsAsFactors = FALSE)
Educationaldata <- read.csv("Educationaldata.csv", stringsAsFactors = FALSE)
combined <-merge(GDPData,Educationaldata, by.x="X", by.y="CountryCode")
combined
names(combined)
source('~/My Box Files/DataSciTraining/Repos/CleaningData - Quiz3/quiz3q1.R')
head(GDPD)
head(GDPData)
?read.csv
GDPData <- read.csv("GDPData.csv", stringsAsFactors = FALSE, skip = 4, header = FALSE, colnames<-c("tag","Ranking","NA","Country","Dollars"))
GDPData <- read.csv("GDPData.csv", stringsAsFactors = FALSE, skip = 4, header = FALSE, colnames<-c("tag","Ranking","NA","Country","Dollars"))
head(Educationaldata)
names(Educationaldata)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
nrow(combined)
names(combined)
GDPData
head(GDPData)
GDPData <- filter(GDPData,Gross.domestic.product.2012>=1)
head(GDPDAta)
head(GDPData)
GDPData <- filter(GDPData,Gross.domestic.product.2012>=1 & is.numeric(Gross.domestic.product.2012))
head(GDPData)
GDPData <- read.csv("GDPData.csv", stringsAsFactors = FALSE)
GDPData <- filter(GDPData,Gross.domestic.product.2012>=1 & is.numeric(Gross.domestic.product.2012))
head(GDPData)
as.numeric("Ranking")
GDPData <- read.csv("GDPData.csv", stringsAsFactors = FALSE)
GDPData <- filter(GDPData,as.numeric(Gross.domestic.product.2012)>=1)
head(GDPData)
rename(GDPData, X=tag, Gross.domestic.product.2012=ranking,X.2=Country,X.3=GDP)
rename(GDPData, tag=X)
head(GDPData)
head(rename(GDPData,x=tag))
head(rename(GDPData,tag=X))
GDPData <- read.csv("GDPData.csv", stringsAsFactors = FALSE)
GDPData <- filter(GDPData,as.numeric(Gross.domestic.product.2012)>=1)
rename(GDPData, X=tag, ranking=Gross.domestic.product.2012,Country=X.2,GDP=X.3)
rename(GDPData, tag=X, ranking=Gross.domestic.product.2012,Country=X.2,GDP=X.3)
GDPData <- rename(GDPData, tag=X, ranking=Gross.domestic.product.2012,Country=X.2,GDP=X.3)
head(GDPData)
GDPData <- select(GDPDAta, tag, ranking, Country, GDP)
GDPData <- select(GDPData, tag, ranking, Country, GDP)
combined <-merge(GDPData,Educationaldata, by.x="tag", by.y="CountryCode")
head(combined)
names(combined)
nrow(unique(combined$tag))
nrow(combined$tag)
combined$tag
length(combined$tag)
head(arrange(combined,GDP),n=13)
head(combined)
combined$Country
head(arrange(combined,ranking))
class(combined$ranking)
?as.numeric
combined$ranking <- as.numeric(combined$ranking)
class(combined$ranking)
head(arrange(combined,ranking))
head(arrange(combined,desc(ranking)),n=13)
?dt
combined[, mean(ranking, na.rm = TRUE), by = Income.Group]
combined <-merge(GDPData,Educationaldata, by.x="tag", by.y="CountryCode")
combined$ranking <- as.numeric(combined$ranking)
combined<-arrange(combined,ranking)
head(combined)
grouped <- group_by(combined,Income.type)
grouped <- group_by(combined,Income.Group)
grouped
summarize(grouped,avg=mean(ranking))
combined$cuts <- cut(combined$ranking, breaks = quantile(combined$ranking,
probs = c(0, 0.2, 0.4, 0.6, 0.8, 1)), include.lowest = TRUE, labels = 1:5)
table(combined$cuts, combined$Income.Group)
setwd("~/My Box Files/DataSciTraining/Repos/CleaningData-CourseProject")
?download.file
activity.labels <- read.csv("data/activity_labels.txt",header=FALSE,sep=" ")
activity.labels
activity.labels <- read.csv("data/activity_labels.txt",header=FALSE,sep=" ",colnames<-c("activity_id","activity_name"))
activity.labels
?read.csv
activity.labels <- read.csv("data/activity_labels.txt",header=FALSE,sep=" ",col.names<-c("activity_id","activity_name"))
activity.labels
activity.labels <- read.csv("data/activity_labels.txt",header=FALSE,sep=" ")
activity.labels
x_train    <- read.table("UCI HAR Dataset/train/X_train.txt", header = FALSE)
y_train    <- read.table("UCI HAR Dataset/train/y_train.txt", header = FALSE)
subj_train <- read.table("UCI HAR Dataset/train/subject_train.txt", header = FALSE)
x_test     <- read.table("UCI HAR Dataset/test/X_test.txt", header = FALSE)
y_test     <- read.table("UCI HAR Dataset/test/y_test.txt", header = FALSE)
subj_test  <- read.table("UCI HAR Dataset/test/subject_test.txt", header = FALSE)
activities <- read.table("data/activity_labels.txt",header = FALSE)
activities <- read.table("UCI HAR Dataset/activity_labels.txt",header = FALSE)
View(activities)
?join
names(x_train)
head(x_train)
head(subj_test)
head(subj_train)
names(x_train)
names(x_test)
